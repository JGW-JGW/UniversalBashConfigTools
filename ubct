#!/bin/bash
# shellcheck disable=SC2068
UBCT_ROOT_DIR=$(dirname "$(readlink -f "$0")")

# shellcheck source=./ubct.conf
. "${UBCT_ROOT_DIR}"/ubct.conf

# shellcheck source=./init
. "${UBCT_ROOT_DIR}"/init

# shellcheck source=./std
. "${UBCT_STD}"

# shellcheck source=./config/baseline/common/universal.sh
. "${UBCT_CONFIG_DIR}"/baseline/common/universal.sh

# shellcheck source=./config/baseline/sles-11.4.sh
# shellcheck source=./config/baseline/sles-12.5.sh
# shellcheck source=./config/baseline/neokylin-V7.0.sh
# shellcheck source=./config/baseline/kylin-V10.sh
# shellcheck source=./config/baseline/centos-7.sh
. "${UBCT_CONFIG_DIR}"/baseline/"${OS_FULL_NAME}".sh

# shellcheck source=./config/hostname/config.sh
. "${UBCT_CONFIG_DIR}"/hostname/config.sh

# shellcheck source=./config/control
. "${UBCT_CONFIG_DIR}"/control

# shellcheck source=./verify/hostname/verify.sh
. "${UBCT_VERIFY_DIR}"/hostname/verify.sh

# shellcheck source=./verify/control
. "${UBCT_VERIFY_DIR}"/control

# show help
function ubct_show_help() {
  echo
  std_prtline -c= -l66
  std_prtline -t"Universal Bash Config Tools ${UBCT_VERSION}" -l66
  std_prtline -c= -l66
  cat <<'EOF'
  
Usage: ubct [MODULE] {OPTION [ARGUMENT]}...

Basic:
  ubct                                         print version information and exit
  ubct -V|--version|version                    print version information and exit
  ubct -h|--help|help                          display this help and exit
  ubct -u|--update|update                      download from GitHub and reinstall

Config baseline:
  ubct config baseline                         auto-detect os and configure it
  ubct config baseline -a|--all                auto-detect os and configure it
  ubct config baseline -o|--only <FUNCNAME>    if FUNCNAME is a valid configuration of current os, execute it

Verify baseline:
  ubct verify baseline                         auto-detect os and verify its config
  ubct verify baseline -a|--all                auto-detect os and verify its config
  ubct verify baseline -o|--only <ITEMNAME>    if ITEMNAME is a group of valid verifications of current os, verify it 

Change hostname:
  ubct config hostname <HOSTNAME>              change hostname to HOSTNAME

Verify hostname:
  ubct verify hostname                         verify hostname

EOF

  return 0
}

# show version
function ubct_show_version() {
  local title
  title="Universal Bash Config Tools ${UBCT_VERSION}"

  local len_total=$((${#title} + 8))
  local len_left=15
  local len_right=$((len_total - len_left))

  echo
  std_prtline -c= -l"${len_total}"
  std_prtline -l"${len_total}" -t"${title}"
  std_prtline -c= -l"${len_total}"
  printf "%-${len_left}s%${len_right}s\n" "OS:" "${OS_FULL_NAME}"
  printf "%-${len_left}s%${len_right}s\n" "Manufacturer:" "${MANUFACTURER}"
  printf "%-${len_left}s%${len_right}s\n" "Product Name:" "${PRODUCT_NAME}"
  printf "%-${len_left}s%${len_right}s\n" "CPU(s):" "${CPU_NUM}"
  printf "%-${len_left}s%${len_right}s\n" "Architecture:" "${CPU_TYPE}"
  printf "%-${len_left}s%${len_right}s\n" "Total Memory:" "${MEM_SIZE_GB} GB"
  printf "%-${len_left}s%${len_right}s\n" "Hostname:" "${HOSTNAME}"
  printf "%-${len_left}s%${len_right}s\n" "IPV4 Address:" "${IP_ADDR}"
  printf "%-${len_left}s%${len_right}s\n" "Location:" "${MACHINE_LOCATION}"
  printf "%-${len_left}s%${len_right}s\n" "Net Zone:" "${NET_ZONE}"
  std_prtline -c= -l"${len_total}"
  std_prtline -t"Try \"ubct -h\" for more." -l"${len_total}"
  echo

  return 0
}

# online update (download from GitHub)
function ubct_update() {
  std_prtmsg FUNCSTART

  # 检查命令是否存在
  std_prtmsg FUNCINFO "checking command..."
  for command in curl unzip; do
    if ! type "${command}" 1>/dev/null 2>/dev/null; then
      std_prtmsg FUNCERR "command not found: \"${command}\""
      std_prtmsg FUNCEND
      exit 255
    fi
  done

  # 获取安装路径和旧版本号
  std_prtmsg FUNCINFO "getting old info..."
  local install_dir=${UBCT_ROOT_DIR}
  local old_version
  old_version=${UBCT_VERSION}
  local destiny_url="https://github.com/JGW-JGW/UniversalBashConfigTools/archive/refs/heads/master.zip"
  local zip_name
  zip_name="$(basename ${destiny_url})"

  std_prtmsg FUNCINFO "downloading package..."

  curl -L -o "${install_dir}/${zip_name}" ${destiny_url}

  std_prtmsg FUNCINFO "installing..."

  unzip -o "${install_dir}/${zip_name}" -d "${install_dir}" || exit 255

  rm -f "${install_dir}/${zip_name}"

  local dir_name="UniversalBashConfigTools-master"

  mv "${install_dir}"/${dir_name}/* "${install_dir}"

  rmdir "${install_dir}/${dir_name}"

  local ubct_cmd="/usr/bin/ubct"
  local ubct_completion="/etc/bash_completion.d/ubct-completion.sh"
  local ubct_conf="/etc/ubct.conf"

  for link in ${ubct_cmd} ${ubct_completion} ${ubct_conf}; do
    [[ -L ${link} ]] && rm -f ${link}
    ln -s "${install_dir}/$(basename ${link})" ${link}
  done

  . ${ubct_completion}

  chmod a+x ${ubct_cmd}

  local new_version
  new_version=$(std_get_conf UBCT_VERSION "${UBCT_ROOT_DIR}"/ubct.conf)

  std_prtmsg FUNCEND "UBCT updated: ${old_version} --> ${new_version}"

  return 0
}

case $1 in
-h | --help | help)
  ubct_show_help
  exit 0
  ;;
-V | --version | version)
  ubct_show_version
  exit 0
  ;;
-u | --update | update)
  ubct_update
  exit 0
  ;;
config)
  shift
  config_control $@
  ;;
verify)
  shift
  verify_control $@
  ;;
*)
  std_prtmsg ERROR "invalid module or option: \"$1\""
  exit 1
  ;;
esac
